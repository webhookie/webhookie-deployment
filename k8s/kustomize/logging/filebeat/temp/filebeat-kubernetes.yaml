---
apiVersion: v1
kind: ConfigMap
metadata:
  name: webhookie-filebeat-config
  namespace: webhookie-logging
  labels:
    k8s-app: webhookie-filebeat
data:
  filebeat.yml: |-
    filebeat.inputs:
      #- type: container
      #  paths:
      #   - /var/log/containers/*.log
      # processors:
      #    - add_kubernetes_metadata:
      #        host: ${NODE_NAME}
      #        matchers:
      #          - logs_path:
      #              logs_path: "/var/log/containers/"
      #    - decode_json_fields:
      #        fields: ["_source", "message"]
      #        target: ""
      #        max_depth: 3              
      #        process_array: false
      #        overwrite_keys: true
      #        add_error_key: true
    filebeat.autodiscover:
      providers:
        - type: kubernetes
          node: ${NODE_NAME}
          hints.enabled: true
          hints.default_config.enabled: false
          hints.default_config:
            type: container
            paths:
              - /var/log/containers/*-${data.kubernetes.container.id}.log
            processors:
              - decode_json_fields:
                  fields: ["_source", "message"]
                  target: ""
                  max_depth: 3
                  process_array: false
                  overwrite_keys: true
                  add_error_key: true
    
    #processors:
      #- add_cloud_metadata:
      #- add_host_metadata:
          
    cloud.id: ${ELASTIC_CLOUD_ID}
    cloud.auth: ${ELASTIC_CLOUD_AUTH}
    
    setup.dashboards.enabled: true
    #setup.kibana.host: "webhookie-kibana-kb-http.webhookie-logging.svc.cluster.local:5601"
    setup.kibana.host: "webhookie-kibana-kb-http:5601"
    setup.kibana.protocol: "https"
    setup.kibana.ssl.verification_mode: "none"
    
    output.elasticsearch:
      hosts: ['${ELASTICSEARCH_HOST:webhookie-elasticsearch-es-http}:${ELASTICSEARCH_PORT:9200}']
      ssl.verification_mode: "none"
      protocol: https
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: webhookie-filebeat
  namespace: webhookie-logging
  labels:
    k8s-app: webhookie-filebeat
spec:
  selector:
    matchLabels:
      k8s-app: webhookie-filebeat
  template:
    metadata:
      labels:
        k8s-app: webhookie-filebeat
    spec:
      serviceAccountName: webhookie-filebeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: webhookie-filebeat
        image: docker.elastic.co/beats/filebeat:8.4.0
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: ELASTICSEARCH_HOST
#          value: https://webhookie-elasticsearch.webhookie-logging.svc.cluster.local
          value: webhookie-elasticsearch-es-http
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ELASTICSEARCH_USERNAME
          value: elastic
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: webhookie-elasticsearch-es-elastic-user
              key: elastic
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
          # If using Red Hat OpenShift uncomment this:
          #privileged: true
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 0640
          name: webhookie-filebeat-config
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          # When filebeat runs as non-root user, this directory needs to be writable by group (g+w).
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: webhookie-filebeat
subjects:
- kind: ServiceAccount
  name: webhookie-filebeat
  namespace: webhookie-logging
roleRef:
  kind: ClusterRole
  name: webhookie-filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: webhookie-filebeat
  namespace: webhookie-logging
subjects:
  - kind: ServiceAccount
    name: webhookie-filebeat
    namespace: webhookie-logging
roleRef:
  kind: Role
  name: webhookie-filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat-kubeadm-config
  namespace: webhookie-logging
subjects:
  - kind: ServiceAccount
    name: webhookie-filebeat
    namespace: webhookie-logging
roleRef:
  kind: Role
  name: filebeat-kubeadm-config
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: webhookie-filebeat
  labels:
    k8s-app: webhookie-filebeat
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  - nodes
  verbs:
  - get
  - watch
  - list
- apiGroups: ["apps"]
  resources:
    - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources:
    - jobs
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: webhookie-filebeat
  # should be the namespace where filebeat is running
  namespace: webhookie-logging
  labels:
    k8s-app: webhookie-filebeat
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat-kubeadm-config
  namespace: webhookie-logging
  labels:
    k8s-app: webhookie-filebeat
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    resourceNames:
      - kubeadm-config
    verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: webhookie-filebeat
  namespace: webhookie-logging
  labels:
    k8s-app: webhookie-filebeat
---
